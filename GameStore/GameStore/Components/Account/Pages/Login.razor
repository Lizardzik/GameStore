@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using GameStore.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<section class="p-3 p-md-4 p-xl-5 ">
    <div class="container py-5">
        @if (registered)
        {
            <div class="alert alert-dismissible alert-success mt-3 align-content-center text-center" >
                <strong>Well done!</strong> Your account has been created successfully.  <a href="#" class="alert-link"> Please log in. </a>
            </div>
        }
        <div class="card border-secondary shadow-sm rounded-3">
            <div class="row g-0">
                <div class="col-12 bg-light col-md-6 d-flex align-items-center justify-content-center rounded-start">
                    <div class="text-center p-4">
                        <h2 class="h1 mb-4">Welcome Back, Gamer!</h2>
                        <p class="lead">Join the adventure and continue your journey with us. Enter your details to log in and dive back into the world of gaming.</p>
                    </div>
                </div>
                <div class="col-12 col-md-6">
                    <div class="card-body p-3 p-md-4 p-xl-5">
                        <h3 class="text-center mb-4">Log in</h3>
                        <StatusMessage Message="@errorMessage" />
                        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                            <DataAnnotationsValidator />
                           

                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                                <label for="email" class="form-label">Email</label>
                                <ValidationMessage For="() => Input.Email" class="text-danger" />
                            </div>

                            <div class="form-floating mb-3">
                                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                                <label for="password" class="form-label">Password</label>
                                <ValidationMessage For="() => Input.Password" class="text-danger" />
                            </div>

                            <div class="form-check mb-3">
                                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                                <label class="form-check-label text-secondary">
                                    Remember me
                                </label>
                            </div>

                            <div class="d-grid mb-3">
                                <button type="submit" class="btn btn-primary btn-lg">Log in now</button>
                            </div>
                        </EditForm>


                        <div class="card border-secondary text-center">
                                <div class="card-body">
                                    <h5 class="card-title">New Here?</h5>
                                    <p class="card-text">Join us today and start your journey.</p>
                                    <a class="btn btn-secondary" href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                                        <i class="bi bi-person-plus"></i> Register as a new user
                                    </a>
                                </div>
                            </div>
                      

                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private bool registered { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
